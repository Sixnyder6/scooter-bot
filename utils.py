# –§–∞–π–ª: utils.py (–í–µ—Ä—Å–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Web App –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

import json
import os
from pathlib import Path
from typing import Dict, Optional
from telegram import ReplyKeyboardMarkup, WebAppInfo, KeyboardButton
from config import *

# <<< –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–∞–∂–Ω–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_user_shift_message >>>
from database import get_last_activity

from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

MOSCOW_TZ = ZoneInfo("Europe/Moscow")


def now_moscow():
    return datetime.now(MOSCOW_TZ)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
USER_DATA: Dict = {}
USER_NAMES: Dict[int, str] = {}


def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ grafik.json –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö."""
    global USER_DATA, USER_NAMES
    try:
        with open(GRAFIK_PATH, "r", encoding="utf-8") as f:
            USER_DATA = json.load(f)
    except FileNotFoundError:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {GRAFIK_PATH}")
        return

    for user_id_str, data in USER_DATA.items():
        user_id = int(user_id_str)
        USER_NAMES[user_id] = data.get("short_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")


def get_user_permissions(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return USER_DATA.get(str(user_id), {}).get("permissions", "none")


def is_user_allowed(user_id: int) -> bool:
    return str(user_id) in USER_DATA


def is_special_user(user_id: int) -> bool:
    perms = get_user_permissions(user_id)
    return perms in ["admin", "special"]


def is_admin(user_id: int) -> bool:
    return get_user_permissions(user_id) == "admin"


def get_user_reply_markup(user_id: int, in_broadcast_mode: bool = False) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –∏ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    if in_broadcast_mode and is_special_user(user_id):
        return ReplyKeyboardMarkup([[BUTTON_RETURN]], resize_keyboard=True)

    perms = get_user_permissions(user_id)

    # ==============================================================================
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –≤ Web App –∫–Ω–æ–ø–∫—É >>>
    # ==============================================================================

    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Web App, –¥–æ–±–∞–≤–ª—è—è –≤ –∫–æ–Ω–µ—Ü ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats_web_app_url = f"{WEB_APP_URL}/stats/{user_id}"

    # 2. –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —ç—Ç–æ—Ç URL
    stats_button = KeyboardButton(BUTTON_MY_STATS, web_app=WebAppInfo(url=stats_web_app_url))

    # 3. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    # WEB_APP_URL –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∫–∏, –∞ –Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    admin_panel_button = KeyboardButton(BUTTON_ADMIN_PANEL, web_app=WebAppInfo(url=WEB_APP_URL))

    if perms == "admin":
        keyboard = [
            [admin_panel_button],
            [BUTTON_VYGRUZKA, BUTTON_TABLE],
            [BUTTON_BROADCAST, stats_button],  # <-- –ó–ê–ú–ï–ù–ê
            [BUTTON_MY_SHIFTS, BUTTON_INFO],
            [BUTTON_CONTACT_ADMIN]
        ]
    elif perms == "special":
        keyboard = [
            [admin_panel_button],
            [BUTTON_VYGRUZKA, BUTTON_TABLE],
            [BUTTON_BROADCAST, stats_button],  # <-- –ó–ê–ú–ï–ù–ê
            [BUTTON_CONTACT_ADMIN],
        ]
    elif perms == "user":
        keyboard = [
            [stats_button, BUTTON_MY_SHIFTS],  # <-- –ó–ê–ú–ï–ù–ê
            [BUTTON_INFO, BUTTON_CONTACT_ADMIN]
        ]
    else:
        return ReplyKeyboardMarkup([[BUTTON_CONTACT_ADMIN]], resize_keyboard=True)

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def get_user_shift_message(user_id: int, days: int = 15) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä–∞—Ñ–∏–∫–µ —Å–º–µ–Ω."""
    user_id_str = str(user_id)
    if user_id_str not in USER_DATA: return "–î–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."
    shifts = USER_DATA[user_id_str].get("shifts", {})
    if not shifts: return "‚ÑπÔ∏è –î–ª—è –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω."

    today = now_moscow().date()
    # –í–æ—Ç –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_last_activity, –ø–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç –±—ã–ª –≤–∞–∂–µ–Ω
    last_activity_str = await get_last_activity(user_id)
    lines = ["üéØ *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω*  \n"]

    for i in range(days):
        d = today + timedelta(days=i)
        d_str, d_view = d.strftime("%Y-%m-%d"), d.strftime("%d.%m")
        shift_type = shifts.get(d_str, "off")
        symbol = SHIFT_SYMBOLS.get(shift_type, "‚ùî –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
        lines.append(f"üìÖ {d_view} ‚Üí {symbol}")

    lines.append("\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  \n‚úÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*")
    return "\n".join(lines)


def format_personal_stats_message(user_name: str, stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π. (–ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")"""
    try:
        first_name = user_name.split()[1]
    except IndexError:
        first_name = user_name

    header = f"üë§ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\nüü¢ *–í —Å–µ—Ç–∏*\n\n*–ò–º—è:* {first_name}\n\n"
    today_part = (
        f"üìÖ *–°–µ–≥–æ–¥–Ω—è:*\n‚Äî ‚úÖ –°–∞–º–æ–∫–∞—Ç–æ–≤: *{stats['today_count']}*\n‚Äî üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: *{stats['today_duplicates']}*\n‚Äî ‚è≥ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: *{stats['last_addition']}*\n\n")

    if stats['decade_total'] >= DECADE_NORM:
        sverkh_normy = stats['decade_total'] - DECADE_NORM
        premiya = sverkh_normy * PREMIUM_RATE
        premiya_str = f"{premiya: ,}‚ÇΩ".replace(',', ' ')
        decade_part = (
            f"üìä *–ó–∞ –¥–µ–∫–∞–¥—É (10 –¥–Ω–µ–π):*\n‚ö°Ô∏è {stats['decade_total']} / {DECADE_NORM}\nüî• –°–≤–µ—Ä—Ö –Ω–æ—Ä–º—ã: *+{sverkh_normy}*\nüí∞ –ü—Ä–µ–º–∏—è: *{premiya_str}*\n\n")
        footer_part = "üìå *–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!*"
    else:
        ostalos = DECADE_NORM - stats['decade_total']
        decade_part = (
            f"üìä *–ó–∞ –¥–µ–∫–∞–¥—É (10 –¥–Ω–µ–π):*\n‚ö°Ô∏è {stats['decade_total']} / {DECADE_NORM}\nüîπ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø—Ä–µ–º–∏–∏: *{ostalos}*\nüí∞ –ü—Ä–µ–º–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞\n\n")
        footer_part = f"üìå *–î–æ–±–µ–π—Ç–µ –µ—â–µ {ostalos} —Å–∞–º–æ–∫–∞—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—é!*"

    all_time_part = (
        f"üìä *–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n‚Äî üöÄ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{stats['overall_total']} —Å–∞–º–æ–∫–∞—Ç–æ–≤*\n‚Äî üåü –õ—É—á—à–∏–π –¥–µ–Ω—å: *{stats['best_day_date']} ‚Äì {stats['best_day_count']} —Å–∞–º–æ–∫–∞—Ç–æ–≤*\n‚Äî üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: *{stats['average_per_day']} —Å–∞–º–æ–∫–∞—Ç–æ–≤*\n‚Äî üèÜ –†–∞–Ω–≥ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['rank']} –º–µ—Å—Ç–æ*\n")
    return header + today_part + decade_part + all_time_part + "\n" + footer_part


def format_today_report_message(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    users_data = stats.get("users", {})
    if not users_data: return "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    sorted_user_ids = sorted(users_data.keys(), key=lambda uid: users_data[uid]['count'], reverse=True)
    lines, overall_total, overall_duplicates = [], 0, 0

    for user_id in sorted_user_ids:
        data = users_data[user_id]
        user_name = USER_NAMES.get(user_id, f"ID {user_id}")
        count = data.get("count", 0)
        duplicates = data.get("duplicates", 0)
        last_add_str = data.get("last_add", "")
        last_add_formatted = datetime.fromisoformat(last_add_str).strftime(
            "%d.%m. %H:%M") if last_add_str else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        user_block = (f"üü¢ {user_name}\n–î–∞—Ç–∞: {last_add_formatted}\n–í—Å–µ–≥–æ —Å–∞–º–æ–∫–∞—Ç–æ–≤: {count}\n–î—É–±–ª–∏–∫–∞—Ç—ã: {duplicates}")
        lines.append(user_block)
        overall_total += count
        overall_duplicates += duplicates

    lines.append(f"\n\n–í—Å–µ–≥–æ —Å–∞–º–æ–∫–∞—Ç–æ–≤: {overall_total}")
    lines.append(f"–í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {overall_duplicates}")
    lines.append(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(sorted_user_ids)}")
    return "\n\n".join(lines)


def format_decade_report_message(decade_num: int, stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–∫–∞–¥—É (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Å—è—Ü/–≥–æ–¥ –∏–∑ stats)."""
    totals = stats.get("totals", {})
    month_name = stats.get("month_name", "N/A")
    year = stats.get("year", "N/A")

    if not totals:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {decade_num}-—é –¥–µ–∫–∞–¥—É ({month_name.lower()} {year} –≥.)."

    header = f"üìä *–û—Ç—á–µ—Ç –∑–∞ {decade_num} –î–µ–∫–∞–¥—É ({month_name} {year})*\n\n"
    stats_lines, premium_users = ["üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*"], []
    sorted_users = sorted(totals.items(), key=lambda item: item[1], reverse=True)

    for user_id, total in sorted_users:
        user_name = USER_NAMES.get(user_id, f"ID {user_id}")
        stats_lines.append(f"üìå {user_name} ‚Äî {total}/{DECADE_NORM}")
        if total > DECADE_NORM:
            premium_amount = (total - DECADE_NORM) * PREMIUM_RATE
            premium_users.append((user_name, premium_amount))

    premium_lines = []
    if premium_users:
        premium_lines.append("\nüí∞ *–ü—Ä–µ–º–∏—è –∑–∞ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º—ã:*")
        for name, amount in sorted(premium_users, key=lambda item: item[1], reverse=True):
            amount_str = f"{amount: ,}‚ÇΩ".replace(',', ' ')
            premium_lines.append(f"üèÖ {name} ‚Äî {amount_str}")

    return header + "\n".join(stats_lines) + "\n" + "\n".join(premium_lines)