# –§–∞–π–ª: main.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø, –ë–õ–Ø–î–¨, –í–ï–†–°–ò–Ø)

import os
import re
import asyncio
import logging
from pathlib import Path
from typing import Optional, Dict

import cv2
import pytesseract
from pyzbar.pyzbar import decode
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import nest_asyncio

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
import config
import database as db
import g_sheets
import utils

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
nest_asyncio.apply()

if config.TESSERACT_CMD and os.path.exists(config.TESSERACT_CMD):
    pytesseract.pytesseract.tesseract_cmd = config.TESSERACT_CMD
else:
    logging.warning("–ü—É—Ç—å –∫ Tesseract-OCR –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.")

NUMBER_PATTERN = re.compile(r'(?:\b00\d{6}\b|\b\d{6,8}\b)')
user_broadcast_state: Dict[int, bool] = {}
last_broadcast_info: Dict = {}


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_special_user(user_id): return
    user_broadcast_state[user_id] = True
    reply_markup = utils.get_user_reply_markup(user_id, in_broadcast_mode=True)
    await update.message.reply_text("–í—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=reply_markup)


async def send_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: Optional[str] = None,
                                 photo_file_id: Optional[str] = None):
    sender_id = update.message.from_user.id
    sender_name = utils.USER_NAMES.get(sender_id, f"ID {sender_id}")
    caption = text or update.message.caption or ""
    full_message = f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: *{sender_name}*\n\n{caption}"
    recipients = [uid for uid_str, data in utils.USER_DATA.items() if
                  data.get("permissions") == "user" and (uid := int(uid_str)) != sender_id]
    if not recipients:
        await context.bot.send_message(chat_id=sender_id, text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    global last_broadcast_info
    last_broadcast_info = {'sender_id': sender_id, 'message_text': caption, 'recipients': recipients, 'message_ids': {},
                           'accepted': set(), 'skipped': set()}
    reply_markup = ReplyKeyboardMarkup([[config.BUTTON_ACCEPT_BROADCAST, config.BUTTON_SKIP_BROADCAST]],
                                       resize_keyboard=True)

    successful_sends, failed_sends = 0, 0
    for user_id in recipients:
        try:
            msg = await (context.bot.send_photo if photo_file_id else context.bot.send_message)(
                chat_id=user_id,
                **(dict(photo=photo_file_id, caption=full_message) if photo_file_id else dict(text=full_message)),
                parse_mode="Markdown", reply_markup=reply_markup
            )
            last_broadcast_info['message_ids'][user_id] = msg.message_id
            successful_sends += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_sends += 1

    user_broadcast_state[sender_id] = False
    await context.bot.send_message(
        chat_id=sender_id, text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {successful_sends}, –û—à–∏–±–æ–∫: {failed_sends}",
        reply_markup=utils.get_user_reply_markup(sender_id)
    )


async def handle_broadcast_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not last_broadcast_info or user_id not in last_broadcast_info.get('recipients', []): return
    action = 'accepted' if update.message.text == config.BUTTON_ACCEPT_BROADCAST else 'skipped'
    last_broadcast_info[action].add(user_id)
    if original_msg_id := last_broadcast_info['message_ids'].get(user_id):
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=original_msg_id)
        except Exception:
            pass
    await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.", reply_markup=utils.get_user_reply_markup(user_id))
    if sender_id := last_broadcast_info.get('sender_id'):
        accepted = sorted([utils.USER_NAMES.get(uid) for uid in last_broadcast_info['accepted']])
        skipped = sorted([utils.USER_NAMES.get(uid) for uid in last_broadcast_info['skipped']])
        report_text = f"üì¢ –û—Ç—á–µ—Ç:\n‚úÖ –ü—Ä–∏–Ω—è–ª–∏ ({len(accepted)}): {', '.join(accepted) or '-'}\n‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ({len(skipped)}): {', '.join(skipped) or '-'}"
        try:
            await context.bot.send_message(chat_id=sender_id, text=report_text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ {sender_id}: {e}")


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_broadcast_state: del user_broadcast_state[user_id]
    if not utils.is_user_allowed(user_id):
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", reply_markup=utils.get_user_reply_markup(user_id))


async def process_and_add_scooter(user_id: int, scooter_number: str):
    await db.add_scooter(user_id, scooter_number)
    await db.update_last_activity(user_id)
    user_data = utils.USER_DATA.get(str(user_id), {})
    asyncio.create_task(
        g_sheets.append_to_google_sheets_async(user_data.get("short_name", ""), scooter_number,
                                               user_data.get("g_sheet_cols"))
    )


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    if not utils.is_user_allowed(user_id): return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—à, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç WebApp –∫–Ω–æ–ø–∫—É
    if text == config.BUTTON_MY_STATS:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª WebApp –∫–Ω–æ–ø–∫—É '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if utils.is_special_user(user_id) and user_broadcast_state.get(user_id):
        await send_broadcast_message(update, context, text=text)
    elif NUMBER_PATTERN.search(text):
        number = NUMBER_PATTERN.search(text).group(0)
        await process_and_add_scooter(user_id, number)
        await update.message.reply_text(f"–°–∞–º–æ–∫–∞—Ç {number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –Ω–æ–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–º —Å –¥—Ä—É–≥–æ–π –∫–Ω–æ–ø–∫–∏
        # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–ª "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞" –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É
        all_buttons = [config.BUTTON_MY_SHIFTS, config.BUTTON_RETURN, config.BUTTON_CONTACT_ADMIN, config.BUTTON_TABLE,
                       config.BUTTON_VYGRUZKA, config.BUTTON_TODAY_REPORT, config.BUTTON_DEKADA_1,
                       config.BUTTON_DEKADA_2, config.BUTTON_DEKADA_3, config.BUTTON_BROADCAST,
                       config.BUTTON_ACCEPT_BROADCAST, config.BUTTON_SKIP_BROADCAST, config.BUTTON_INFO]
        if text not in all_buttons:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_user_allowed(user_id): return
    if utils.is_special_user(user_id) and user_broadcast_state.get(user_id):
        await send_broadcast_message(update, context, photo_file_id=update.message.photo[-1].file_id)
        return

    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    photo_file = await update.message.photo[-1].get_file()
    config.TEMP_DIR.mkdir(exist_ok=True)
    file_path = config.TEMP_DIR / f"{photo_file.file_id}.jpg"
    await photo_file.download_to_drive(file_path)

    scooter_number = extract_number_from_image(str(file_path))
    if scooter_number:
        await process_and_add_scooter(user_id, scooter_number)
        await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–æ–º–µ—Ä {scooter_number}. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ.")
    try:
        os.remove(file_path)
    except OSError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")


async def handle_vygruzka(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_special_user(user_id): return
    keyboard = [[config.BUTTON_TODAY_REPORT], [config.BUTTON_DEKADA_1, config.BUTTON_DEKADA_2],
                [config.BUTTON_DEKADA_3], [config.BUTTON_RETURN]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
                                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


async def handle_report_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_special_user(user_id): return
    await context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    stats = await g_sheets.get_live_report_from_gsheet_async()
    message = utils.format_today_report_message(stats)
    await update.message.reply_text(message, parse_mode="Markdown")


async def handle_report_decade(update: Update, context: ContextTypes.DEFAULT_TYPE, decade_num: int):
    user_id = update.message.from_user.id
    if not utils.is_special_user(user_id): return
    await context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    stats_data = await db.get_report_stats("decade", decade_num=decade_num)
    message = utils.format_decade_report_message(decade_num, stats_data)
    await update.message.reply_text(message, parse_mode="Markdown")


async def handle_my_shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_user_allowed(user_id): return
    message = await utils.get_user_shift_message(user_id)
    await update.message.reply_text(message, parse_mode="Markdown")


async def handle_table_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_special_user(user_id): return
    keyboard = [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=config.GOOGLE_SHEET_URL)]]
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Google –¢–∞–±–ª–∏—Ü—ã:", reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_user_allowed(user_id): return
    await update.message.reply_text("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Cyberdyne_Industries")


async def handle_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not utils.is_user_allowed(user_id): return

    photos_info = [
        ("1 QR.jpg", "üì∏ –§–æ—Ç–æ 1 ‚Äì QR-–∫–æ–¥ –Ω–∞ —Å–∞–º–æ–∫–∞—Ç–µ\nüîπ *–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ...*"),
        ("2 Nomer Text.jpg", "üì∏ –§–æ—Ç–æ 2 ‚Äì –°–∫—Ä–∏–Ω —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º\nüîπ *–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ...*"),
        ("grafic.png", "üì∏ –§–æ—Ç–æ 3 ‚Äì –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫\nüîπ *–û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫...*"),
    ]

    for filename, caption in photos_info:
        photo_path = config.INFO_PHOTOS_DIR / filename
        if photo_path.exists():
            try:
                await context.bot.send_photo(chat_id=update.message.chat_id, photo=photo_path, caption=caption,
                                             parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ-—Ñ–æ—Ç–æ {filename}: {e}")
        else:
            logging.warning(f"–ò–Ω—Ñ–æ-—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path}")


def rotate_image(image, angle):
    (h, w) = image.shape[:2];
    center = (w / 2, h / 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0);
    return cv2.warpAffine(image, M, (w, h))


def extract_number_from_image(image_path: str) -> Optional[str]:
    try:
        image = cv2.imread(image_path)
        if image is None: return None
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        for angle in [0, 90, 180, 270]:
            for obj in decode(rotate_image(gray, angle)):
                if match := re.search(r'\d{8}', obj.data.decode("utf-8")):
                    return match.group(0)
        if match := NUMBER_PATTERN.search(pytesseract.image_to_string(gray, config='--psm 6')):
            return match.group(0)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
    return None


async def main():
    utils.load_user_data()
    await db.init_db()
    application = Application.builder().token(config.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    button_handlers = {
        # –≠–¢–û–ô –°–£–ö–ò –ë–û–õ–¨–®–ï –ù–ï–¢, –¢–ï–ü–ï–†–¨ –í–°–Å –ë–£–î–ï–¢ –ó–ê–ï–ë–ò–°–¨
        config.BUTTON_MY_SHIFTS: handle_my_shifts,
        config.BUTTON_RETURN: start,
        config.BUTTON_CONTACT_ADMIN: handle_contact_admin,
        config.BUTTON_TABLE: handle_table_button,
        config.BUTTON_VYGRUZKA: handle_vygruzka,
        config.BUTTON_TODAY_REPORT: handle_report_today,
        config.BUTTON_DEKADA_1: lambda u, c: handle_report_decade(u, c, 1),
        config.BUTTON_DEKADA_2: lambda u, c: handle_report_decade(u, c, 2),
        config.BUTTON_DEKADA_3: lambda u, c: handle_report_decade(u, c, 3),
        config.BUTTON_BROADCAST: start_broadcast,
        config.BUTTON_ACCEPT_BROADCAST: handle_broadcast_reply,
        config.BUTTON_SKIP_BROADCAST: handle_broadcast_reply,
        config.BUTTON_INFO: handle_info,
    }
    for button_text, callback in button_handlers.items():
        application.add_handler(MessageHandler(
            filters.TEXT & filters.Regex(f"^{re.escape(button_text)}$") & filters.Chat(
                chat_id=list(map(int, utils.USER_DATA.keys()))), callback))

    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await application.run_polling()


if __name__ == '__main__':
    asyncio.run(main())